buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'org.junit.platform.gradle.plugin'

repositories {
    mavenCentral()
}

sourceCompatibility = java_version
targetCompatibility = java_version

dependencies {
	compile "com.google.guava:guava:$guava_version"
	compile "org.apache.commons:commons-lang3:$commons_lang3_version"
	testCompile "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
	testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

junitPlatform {
	details 'tree'
}

archivesBaseName = 'EXComms'
version = "${version_major}.${version_minor}.${version_patch}"
if(version_channel != 'release') version += "-$version_channel"
group = 'code.elix_x.excomms'

task generatePom {
    doLast {
		def pomFile = "$buildDir/libs/$archivesBaseName-${version}.pom"
        pom {
            project {
                name 'EXComms'
				description 'Elix\'x Common Library for Java 8+'
				url 'https://github.com/Elix-x/EXComms'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
				developers {
					developer {
						name 'Elix X'
						email 'elix.x.ggl@gmail.com'
						url 'https://github.com/Elix-x'
					}
				}
				scm {
					connection 'scm:git:git://github.com/Elix-x/EXComms.git'
					developerConnection 'scm:git:ssh://github.com:Elix-x/EXComms.git'
					url 'https://github.com/Elix-x/EXComms/tree/master'
				}
            }
        }.writeTo(pomFile)
		ant.checksum file: pomFile
		ant.checksum(file: pomFile, algorithm: 'SHA')
    }
}

task sourcesJar(type: Jar){
	classifier = "sources"
    from sourceSets.main.allJava
}

javadoc.failOnError = false
task javadocJar(type: Jar, dependsOn: 'javadoc'){
	classifier = "javadoc"
	from "$buildDir/docs/javadoc"
}

tasks.withType(Jar){ task ->
    task.doLast {
		ant.checksum file: task.archivePath
		ant.checksum(file: task.archivePath, algorithm: 'SHA')
	}
}

task postBuild(dependsOn: ['sourcesJar', 'javadocJar', 'generatePom']){

}

assemble.finalizedBy postBuild